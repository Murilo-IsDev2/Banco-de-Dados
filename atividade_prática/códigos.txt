--3 - atividades
SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';

SELECT count(*) FROM pessoa;
SELECT count(*) FROM paciente;
SELECT count(*) FROM medico;
SELECT count(*) FROM consulta;


--atividade 

--Verifique se há dados existentes em endereco:
SELECT id, nome, endereco FROM pessoa LIMIT 20;
SELECT * FROM pessoa ;

--criar campos de endereço na tabela pessoa (melhor prática ser uma tabela separada)
ALTER TABLE pessoa
  ADD COLUMN logradouro varchar(255),
  ADD COLUMN numero varchar(20),
  ADD COLUMN complemento varchar(100),
  ADD COLUMN bairro varchar(100),
  ADD COLUMN cidade varchar(100),
  ADD COLUMN uf char(2),
  ADD COLUMN cep varchar(9);

--separar o endereço em logradouro 
UPDATE pessoa
SET logradouro = split_part(endereco, ',', 1),
    numero = trim(split_part(endereco, ',', 2));

--tirar o campo endereço, agoa que já tem logradouro e numero
ALTER TABLE pessoa DROP COLUMN endereco;


--Mostra aleração feita
SELECT nome, logradouro, numero, cidade, uf, cep FROM pessoa LIMIT 15;


--atividade 3

--e se alguém escrever a especialidade errada ou com nome diferente
SELECT * FROM medico;
SELECT * FROM especialidade;

--Cria a tabela especialidade
CREATE TABLE especialidade (
  id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nome varchar(100) NOT NULL UNIQUE
);
--insere todas as especialidades distintas na tabela
INSERT INTO especialidade (nome)
SELECT DISTINCT especialidade FROM medico WHERE especialidade IS NOT NULL;

--cria o atributo especialidade_id
ALTER TABLE medico ADD COLUMN especialidade_id int;

--Atualizando e setando a especialidade id de cada médico pelo nome
UPDATE medico m
SET especialidade_id = (
  SELECT id FROM especialidade e WHERE e.nome = m.especialidade
);

--Adicionando uma restrição da foreing key especialidade_id
ALTER TABLE medico
  ADD CONSTRAINT fk_medico_especialidade FOREIGN KEY (especialidade_id)
    REFERENCES especialidade(id);

-- retiro o atributo especialidade por já ter o especialidade_id
ALTER TABLE medico DROP COLUMN especialidade;

--select do print:
SELECT 
    m.pessoa_id, p.nome, e.nome 
FROM 
    medico m JOIN pessoa p ON m.pessoa_id = p.id 
JOIN 
    especialidade e ON m.especialidade_id = e.id;


-- atividade 4
SELECT * FROM pessoa;
--aplica o regex no cpf para remover a máscara
UPDATE pessoa
SET cpf = regexp_replace(cpf, '[^0-9]', '', 'g');

--converter tipo para char(11) (exemplo)
ALTER TABLE pessoa ALTER COLUMN cpf TYPE char(11)
  USING lpad(regexp_replace(cpf, '[^0-9]', '', 'g'), 11, '0');


--Adicionar constraint de formato:
ALTER TABLE pessoa ADD CONSTRAINT chk_cpf_formato CHECK (cpf ~ '^[0-9]{11}$');

--Telefone: limpar não numéricos e alterar tipo para varchar(15):
UPDATE pessoa SET telefone = regexp_replace(telefone, '[^0-9]', '', 'g');
ALTER TABLE pessoa ALTER COLUMN telefone TYPE varchar(15)
  USING regexp_replace(telefone, '[^0-9]', '', 'g');


SELECT id, nome, cpf, telefone FROM pessoa;

--atividade 5

--Verificar duplicatas e entradas inválidas antes de aplicar constraints:
SELECT email, count(*) FROM pessoa GROUP BY email HAVING count(*) > 1;
SELECT * FROM pessoa WHERE email !~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$';

--Corrigir manualmente os registros inválidos (se existir) e depois aplicar constraints:
ALTER TABLE pessoa ADD CONSTRAINT uq_pessoa_email UNIQUE (email);
ALTER TABLE pessoa ADD CONSTRAINT chk_email_formato CHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$');

--Atividade 6
--Garantir que não tem consulta do mesmo médico no mesmo horário
ALTER TABLE consulta ADD CONSTRAINT uq_medico_agendamento UNIQUE (medico_id, data_consulta);

--tentar inserir no mesmo horário para testar a constraint.
INSERT INTO consulta(paciente_id, medico_id, data_consulta, observacoes) VALUES
(1, 16, '2025-01-10 09:00', 'Retorno para avaliação'),


--Atividade 7

--Lista Médicos sem consulta:
-- LEFT JOIN
SELECT p.nome, m.crm
FROM medico m
JOIN pessoa p ON m.pessoa_id = p.id
LEFT JOIN consulta c ON m.pessoa_id = c.medico_id
WHERE c.id IS NULL;

--Lista todos os pacientes sem consulta

SELECT p.nome, pa.numero_cartao
FROM paciente pa
JOIN pessoa p ON pa.pessoa_id = p.id
LEFT JOIN consulta c ON pa.pessoa_id = c.paciente_id
WHERE c.id IS NULL;
